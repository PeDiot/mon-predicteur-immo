}
make_histogram(var_name = var_name, thresold = thresold)
n_vars <- ncol(dat_quanti)
colors <- brewer.pal(n_vars, "Set3")
var_name <- "valeur_fonciere"
thresold <- stats_quanti[[var_name]][var_name, "Q75%"]
make_histogram <- function(df = dat_quanti, var_name, density = T, thresold = NULL){
"Description. Return histogram plot with optional kernel density line."
if (!is.null(thresold)) {
df <- df %>%
filter(!!sym(var_name) <= thresold)
title <- paste0(var_name, " | Valeur maximale = ", thresold %>% format(big.mark = " ", scientific = F, digits = 2))
}
else {
title <- var_name
}
p <- df %>%
ggplot(mapping = aes(x = !!sym(var_name), y = ..density..)) +
geom_histogram(bins = 50,
fill = colors[1],
color = "white",
alpha = .5)
if (density == T) {
p <- p +
geom_density(color = colors[1])
}
p <- p +
labs(x = "", title = title)
ggplotly(p)
}
make_histogram(var_name = var_name, thresold = thresold)
plot_list <- list()
for (i in 1:n_vars) {
var_name <- col_quanti[i]
thresold <- stats_quanti[[var_name]][var_name, "Q75%"]
plot_list[[var_name]] <- make_histogram(var_name = var_name, thresold = thresold)
}
plot_list$surface_reelle_bati
n_vars <- ncol(dat_quanti)
colors <- brewer.pal(n_vars, "Set3")
make_histogram <- function(df = dat_quanti, var_name, density = T, thresold = NULL, color = "blue"){
"Description. Return histogram plot with optional kernel density line."
if (!is.null(thresold)) {
df <- df %>%
filter(!!sym(var_name) <= thresold)
title <- paste0(var_name, " | Valeur maximale = ", thresold %>% format(big.mark = " ", scientific = F, digits = 2))
}
else {
title <- var_name
}
p <- df %>%
ggplot(mapping = aes(x = !!sym(var_name), y = ..density..)) +
geom_histogram(bins = 50,
fill = color,
color = "white",
alpha = .5)
if (density == T) {
p <- p +
geom_density(color = color)
}
p <- p +
labs(x = "", title = title)
ggplotly(p)
}
plot_list <- list()
for (i in 1:n_vars) {
var_name <- col_quanti[i]
thresold <- stats_quanti[[var_name]][var_name, "Q75%"]
plot_list[[var_name]] <- make_histogram(var_name = var_name, thresold = thresold)
}
n_vars <- ncol(dat_quanti)
colors <- brewer.pal(n_vars, "Set3")
make_histogram <- function(df = dat_quanti, var_name, density = T, thresold = NULL, color = "blue"){
"Description. Return histogram plot with optional kernel density line."
if (!is.null(thresold)) {
df <- df %>%
filter(!!sym(var_name) <= thresold)
title <- paste0(var_name, " | Valeur maximale = ", thresold %>% format(big.mark = " ", scientific = F, digits = 2))
}
else {
title <- var_name
}
p <- df %>%
ggplot(mapping = aes(x = !!sym(var_name), y = ..density..)) +
geom_histogram(bins = 50,
fill = color,
color = "white",
alpha = .5)
if (density == T) {
p <- p +
geom_density(color = color)
}
p <- p +
labs(x = "", title = title)
ggplotly(p)
}
plot_list <- list()
for (i in 1:n_vars) {
var_name <- col_quanti[i]
thresold <- stats_quanti[[var_name]][var_name, "Q75%"]
color <- colors[i]
plot_list[[var_name]] <- make_histogram(var_name = var_name, thresold = thresold, color = color)
}
plot_list$lot5_surface_carrez
make_histogram <- function(df = dat_quanti, var_name, density = T, thresold = NULL, color = "blue"){
"Description. Return histogram plot with optional kernel density line."
if (!is.null(thresold)) {
df <- df %>%
filter(!!sym(var_name) <= thresold)
title <- paste0(var_name, " | Valeur maximale = ", thresold %>% format(big.mark = " ", scientific = F, digits = 2))
}
else {
title <- var_name
}
p <- df %>%
ggplot(mapping = aes(x = !!sym(var_name), y = ..density..)) +
geom_histogram(bins = 50,
fill = color,
color = "white",
alpha = .8)
if (density == T) {
p <- p +
geom_density(color = color)
}
p <- p +
labs(x = "", title = title)
ggplotly(p)
}
plot_list <- list()
for (i in 1:n_vars) {
var_name <- col_quanti[i]
thresold <- stats_quanti[[var_name]][var_name, "Q75%"]
color <- colors[i]
plot_list[[var_name]] <- make_histogram(var_name = var_name, thresold = thresold, color = color)
}
plot_list$nombre_pieces_principales
unique(dat$nombre_pieces_principales)
dat_cat <- dat %>%
dplyr::select(where(is.character) & nombre_pieces_principales) %>%
dplyr::select(-one_of(col_id)) %>%
unclass() %>%
as.data.frame(stringsAsFactors = T)
make_structure_table(dat_cat, missing) %>% datatable()
dat_cat <- dat %>%
dplyr::select(where(is.character) & nombre_pieces_principales) %>%
dplyr::select(-one_of(col_id)) %>%
unclass() %>%
as.data.frame(stringsAsFactors = T)
dat_cat <- dat %>%
dplyr::select(where(is.character) & nombre_pieces_principales) %>%
dplyr::select(-one_of(col_id)) %>%
unclass() %>%
as.data.frame(stringsAsFactors = T)
View(dat_cat)
dat_cat <- dat %>%
dplyr::select(where(is.character)) %>%
dplyr::select(-one_of(col_id)) %>%
mutate(nombre_pieces_principales = dat %>% pull(nombre_pieces_principales)) %>%
unclass() %>%
as.data.frame(stringsAsFactors = T) %>%
```
dat %>% pull(nombre_pieces_principales)
dat %>%
dplyr::select(where(is.character)) %>%
dplyr::select(-one_of(col_id)) %>%
mutate(nombre_pieces_principales = dat %>% pull(nombre_pieces_principales))
dat_cat <- dat %>%
dplyr::select(where(is.character)) %>%
dplyr::select(-one_of(col_id)) %>%
mutate(nombre_pieces_principales = dat %>% pull(nombre_pieces_principales)) %>%
unclass() %>%
as.data.frame(stringsAsFactors = T) %>%
dat_cat <- dat %>%
dplyr::select(where(is.character)) %>%
dplyr::select(-one_of(col_id)) %>%
mutate(nombre_pieces_principales = dat %>% pull(nombre_pieces_principales)) %>%
unclass() %>%
as.data.frame(stringsAsFactors = T)
dat_cat <- dat %>%
dplyr::select(where(is.character)) %>%
dplyr::select(-one_of(col_id)) %>%
mutate(nombre_pieces_principales = dat %>% pull(nombre_pieces_principales)) %>%
unclass() %>%
as.data.frame(stringsAsFactors = T)
make_structure_table(dat_cat, missing) %>% datatable()
n_vars <- ncol(dat_cat)
colors <- brewer.pal(n_vars, "Set3")
plot_list <- list()
for (i in 1:n_vars){
var_name <- colnames(dat_cat)[i]
n_levels <- nlevels(dat_cat[[var_name]])
if (missing[var_name, "%"] < 100 & n_levels < 30)
plot_list[[var_name]]<- make_pct_countplot(var_name = var_name, color = colors[i])
}
plot_list$nombre_pieces_principales
col_quanti <- c(
"valeur_fonciere",
"surface_reelle_bati",
"surface_terrain",
"lot1_surface_carrez",
"lot2_surface_carrez",
"lot3_surface_carrez",
"lot4_surface_carrez",
"lot5_surface_carrez")
dat_quanti <- dat %>% dplyr::select(all_of(col_quanti))
make_structure_table(dat_quanti, missing) %>% datatable()
stats_quanti <- sapply(
X = col_quanti,
FUN = function(var_name) {
x <- dat_quanti %>% pull(var_name)
stat_table(x, var_name)
},
USE.NAMES = T,
simplify = F
)
stats_quanti_tab <- stats_quanti %>%
bind_rows() %>%
mutate_if(is.numeric, funs(format(., big.mark = " ", scientific = F, digits = 2)))
stats_quanti_tab %>%
mykable(title = "Résumé statistiques des variables quantitatives")
n_vars <- ncol(dat_quanti)
colors <- brewer.pal(n_vars, "Set3")
make_histogram <- function(df = dat_quanti, var_name, density = T, thresold = NULL, color = "blue"){
"Description. Return histogram plot with optional kernel density line."
if (!is.null(thresold)) {
df <- df %>%
filter(!!sym(var_name) <= thresold)
title <- paste0(var_name, " | Valeur maximale = ", thresold %>% format(big.mark = " ", scientific = F, digits = 2))
}
else {
title <- var_name
}
p <- df %>%
ggplot(mapping = aes(x = !!sym(var_name), y = ..density..)) +
geom_histogram(bins = 50,
fill = color,
color = "white",
alpha = .8)
if (density == T) {
p <- p +
geom_density(color = color)
}
p <- p +
labs(x = "", title = title)
ggplotly(p)
}
plot_list <- list()
for (i in 1:n_vars) {
var_name <- col_quanti[i]
thresold <- stats_quanti[[var_name]][var_name, "Q75%"]
color <- colors[i]
plot_list[[var_name]] <- make_histogram(var_name = var_name, thresold = thresold, color = color)
}
plot_list$valeur_fonciere
stats_quanti
stats_quanti %>%
bind_rows()
stats_quanti_tab <- stats_quanti %>%
bind_rows() %>%
filter(rownames(.) != "valeur_fonciere") %>%
mutate_if(is.numeric, funs(format(., big.mark = " ", scientific = F, digits = 2)))
stats_quanti_tab %>%
mykable(title = "Résumé statistiques des variables quantitatives")
stats_quanti$valeur_fonciere
stats_quanti$valeur_fonciere %>%
mutate_if(is.numeric, funs(format(., big.mark = " ", scientific = F, digits = 2)))
mykable(title = "Résumé statistique de la variable cible")
stats_quanti$valeur_fonciere %>%
mutate_if(is.numeric, funs(format(., big.mark = " ", scientific = F, digits = 2))) %>%
mykable(title = "Résumé statistique de la variable cible")
library(shiny)
div(plot_list$valeur_fonciere, align = "center")
make_histogram <- function(df = dat_quanti, var_name, density = T, thresold = NULL, color = "blue"){
"Description. Return histogram plot with optional kernel density line."
if (!is.null(thresold)) {
df <- df %>%
filter(!!sym(var_name) <= thresold)
}
p <- df %>%
ggplot(mapping = aes(x = !!sym(var_name), y = ..density..)) +
geom_histogram(bins = 50,
fill = color,
color = "white",
alpha = .8)
if (density == T) {
p <- p +
geom_density(color = color)
}
p <- p +
labs(x = "", title = var_name)
ggplotly(p) %>%
layout(title = list(font = list(size = 10)))
}
plot_list <- list()
for (i in 1:n_vars) {
var_name <- col_quanti[i]
thresold <- stats_quanti[[var_name]][var_name, "Q75%"]
color <- colors[i]
plot_list[[var_name]] <- make_histogram(var_name = var_name, thresold = thresold, color = color)
}
plot_list$surface_reelle_bati
make_histogram <- function(df = dat_quanti, var_name, density = T, thresold = NULL, color = "blue"){
"Description. Return histogram plot with optional kernel density line."
if (!is.null(thresold)) {
df <- df %>%
filter(!!sym(var_name) <= thresold)
}
p <- df %>%
ggplot(mapping = aes(x = !!sym(var_name), y = ..density..)) +
geom_histogram(bins = 50,
fill = color,
color = "white",
alpha = .8)
if (density == T) {
p <- p +
geom_density(color = color)
}
p <- p +
labs(x = "", title = var_name)
ggplotly(p) %>%
layout(title = list(font = list(size = 12)),
font = list(size = 10))
}
plot_list <- list()
for (i in 1:n_vars) {
var_name <- col_quanti[i]
thresold <- stats_quanti[[var_name]][var_name, "Q75%"]
color <- colors[i]
plot_list[[var_name]] <- make_histogram(var_name = var_name, thresold = thresold, color = color)
}
plot_list$surface_reelle_bati
make_histogram <- function(df = dat_quanti, var_name, density = T, thresold = NULL, color = "blue"){
"Description. Return histogram plot with optional kernel density line."
if (!is.null(thresold)) {
df <- df %>%
filter(!!sym(var_name) <= thresold)
}
p <- df %>%
ggplot(mapping = aes(x = !!sym(var_name), y = ..density..)) +
geom_histogram(bins = 50,
fill = color,
color = "white",
alpha = .8)
if (density == T) {
p <- p +
geom_density(color = color)
}
p <- p +
labs(x = "", title = var_name) +
theme(title = element_text(size = 10),
axis.title = element_text(size = 9))
}
plot_list <- list()
for (i in 1:n_vars) {
var_name <- col_quanti[i]
thresold <- stats_quanti[[var_name]][var_name, "Q75%"]
color <- colors[i]
plot_list[[var_name]] <- make_histogram(var_name = var_name, thresold = thresold, color = color)
}
plot_list$surface_reelle_bati
make_histogram <- function(df = dat_quanti, var_name, density = T, thresold = NULL, color = "blue"){
"Description. Return histogram plot with optional kernel density line."
if (!is.null(thresold)) {
df <- df %>%
filter(!!sym(var_name) <= thresold)
}
p <- df %>%
ggplot(mapping = aes(x = !!sym(var_name), y = ..density..)) +
geom_histogram(bins = 50,
fill = color,
color = "white",
alpha = .8)
if (density == T) {
p <- p +
geom_density(color = color)
}
p <- p +
labs(x = "", title = var_name) +
theme(title = element_text(size = 10),
axis.title = element_text(size = 9))
ggplotly(p)
}
plot_list <- list()
for (i in 1:n_vars) {
var_name <- col_quanti[i]
thresold <- stats_quanti[[var_name]][var_name, "Q75%"]
color <- colors[i]
plot_list[[var_name]] <- make_histogram(var_name = var_name, thresold = thresold, color = color)
}
plot_list$surface_reelle_bati
library(rmarkdown)
?render
mad(dat$valeur_fonciere)
mad(dat$valeur_fonciere, na.rm = T)
?mad
hampel_filter <- function(x) {
"Description. Compute Hampel filter to identify outliers."
bound <- 3 * mad(x, constant = 1)
outliers <- which(x < median(x) - bound | x > median(x) + bound)
return(outliers)
}
hampel_filter(x = dat$valeur_fonciere)
hampel_filter <- function(x) {
"Description. Compute Hampel filter to identify outliers."
bound <- 3 * mad(x, constant = 1)
print(median(x) - bound)
outliers <- which(x < median(x) - bound | x > median(x) + bound)
return(outliers)
}
hampel_filter(x = dat$valeur_fonciere)
hampel_filter <- function(x) {
"Description. Compute Hampel filter to identify outliers."
bound <- 3 * mad(x, constant = 1, na.rm = T)
med_x <- median(x, na.rm = T)
outliers <- which(x < med_x - bound | x > med_x + bound)
return(outliers)
}
hampel_filter(x = dat$valeur_fonciere)
n <- nrow(dat)
outliers <- sapply(
X = col_quanti,
FUN = function(var_name) dat %>% pull(var_name) %>% hampel_filter,
USE.NAMES = T
)
outliers
sapply(
X = outliers,
FUN = length
)
outliers <- sapply(
X = col_quanti,
FUN = function(var_name) dat %>% pull(var_name) %>% hampel_filter
)
outliers_freqs <- sapply(
X = outliers,
FUN = length
) %>%
```
outliers_freqs <- sapply(
X = outliers,
FUN = length
) %>% bind_rows()
outliers_freqs
View(outliers_freqs)
outliers_freqs <- sapply(
X = outliers,
FUN = length
) %>% bind_rows() %>%
t()
outliers_freqs
outliers_freqs <- sapply(
X = outliers,
FUN = length
) %>%
bind_rows() %>%
t() %>%
as.data.frame()
outliers_freqs
outliers_freqs <- sapply(
X = outliers,
FUN = length
) %>%
bind_rows() %>%
t() %>%
as.data.frame() %>%
rename(Freq = V1)
outliers_freqs
outliers_freqs %>%
arrange(desc(V1))
outliers_freqs %>%
arrange(desc(Freq))
n <- nrow(dat)
outliers_freqs <- sapply(
X = outliers,
FUN = function(x) length(x) / n
) %>%
bind_rows() %>%
t() %>%
as.data.frame() %>%
rename(Freq = V1)
outliers_freqs %>%
arrange(desc(Freq)) %>%
mutate_if(is.numeric, funs(format(., big.mark = " ", scientific = F, digits = 2))) %>%
mykable(title = "Résumé statistique de la variable cible", transp = T)
outliers_freqs %>%
arrange(desc(Freq)) %>%
mutate_if(is.numeric, funs(format(100 * ., big.mark = " ", scientific = F, digits = 2)))
outliers_freqs %>%
arrange(desc(Freq)) %>%
mutate_if(is.numeric, funs(format(100 * ., big.mark = " ", scientific = F, digits = 2))) %>%
mykable(title = "Résumé statistique de la variable cible", transp = T)
outliers <- sapply(
X = col_quanti,
FUN = function(var_name) dat %>% pull(var_name) %>% hampel_filter
)
n <- nrow(dat)
outliers_freqs <- sapply(
X = outliers,
FUN = function(x) length(x) / n
) %>%
bind_rows() %>%
t() %>%
as.data.frame() %>%
rename(`%` = V1)
outliers_freqs %>%
arrange(desc(`%`)) %>%
mutate_if(is.numeric, funs(format(100 * ., big.mark = " ", scientific = F, digits = 2))) %>%
mykable(title = "Proportion d'outliers par variable", transp = T)
outliers_freqs %>%
arrange(desc(`%`)) %>%
mutate_if(is.numeric, funs(format(100 * ., big.mark = " ", scientific = F, digits = 2))) %>%
mykable(title = "Proportion d'outliers par variable")
